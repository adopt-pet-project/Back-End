name: BackEnd - CI/CD

on:
  push:
    branches: ["main"]

permissions:
  contents: read

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Set up JDK 11
      uses: actions/setup-java@v3
      with:
        java-version: '11'
        distribution: 'temurin'

    ## gradle caching
    - name: Gradle 캐싱
      uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
                ${{ runner.os }}-gradle-

#    - name: Make application.yml
#      run: |
#        cd ./src/main
#        mkdir resources
#        cd ./resources
#        touch ./application.yml
#        echo "${{ secrets.APPLICATION }}" > ./application.yml
#      shell: bash

    - name: Gradle 권한 부여
      run: chmod +x gradlew

    - name: Gradle로 빌드 실행
      run: ./gradlew bootjar


    - name: zip file 생성
      run: |
        mkdir deploy
        cp ./docker/docker-compose.blue.yml ./deploy/
        cp ./docker/docker-compose.green.yml ./deploy/
        cp ./appspec.yml ./deploy/
        cp ./docker/Dockerfile ./deploy/
        cp ./scripts/*.sh ./deploy/
        cp ./build/libs/*.jar ./deploy/
        zip -r -qq -j ./spring-build.zip ./deploy


    - name: AWS 연결
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: S3에 프로젝트 업로드
      run: |
        aws s3 cp \
        --region ap-northeast-2 \
        ./spring-build.zip s3://backend-rex-bucket

    # 추가
    - name: Code Deploy 배포 요청
      run: aws deploy create-deployment --application-name backend-deploy-group
        --deployment-config-name CodeDeployDefault.OneAtATime
        --deployment-group-name backend-deploy-group
        --s3-location bucket=backend-rex-bucket,bundleType=zip,key=spring-build.zip
          
    - name: Slack 알람 발송
      uses: rtCamp/action-slack-notify@v2
      env:
        SLACK_CHANNEL: general
        SLACK_COLOR: ${{ job.status }} # or a specific color like 'good' or '#ff00ff'
        SLACK_ICON: https://github.com/rtCamp.png?size=48
        SLACK_MESSAGE: 배포 결과 => ${{ job.status }}
        SLACK_TITLE: 배포 결과 알람
        SLACK_USERNAME: Notification-Bot
        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_URL }}
      if: always()
